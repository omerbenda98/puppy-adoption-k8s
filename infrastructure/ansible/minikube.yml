---
- name: Setup Minikube Environment
  hosts: aws_vm
  become: yes
  tasks:
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ansible_distribution_release}} stable
        state: present

    - name: Download kubectl
      get_url:
        url: https://dl.k8s.io/release/v1.29.0/bin/linux/amd64/kubectl
        dest: /usr/local/bin/kubectl
        mode: "0755"

    - name: Install dependencies
      apt:
        name:
          - docker.io
          - nginx
          - git
        state: present

    - name: Download Minikube
      get_url:
        url: https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        dest: /usr/local/bin/minikube
        mode: "0755"

    - name: Configure Minikube
      command: minikube config set {{ item.key }} {{ item.value }}
      loop:
        - { key: driver, value: docker }
        - { key: kubernetes-version, value: v1.29.0 }
        - { key: memory, value: 6144 }
        - { key: cpus, value: 2 }

    - name: Get public IP of the VM
      uri:
        url: http://checkip.amazonaws.com/
        return_content: yes
      register: public_ip
      tags: duckdns

    - name: Update DuckDNS record for dev environment
      uri:
        url: "https://www.duckdns.org/update?domains=puppies-adopt&token=6dcc1d30-6c5d-4c20-a036-5c590e18c696&ip={{ public_ip.content | trim }}"
        method: GET
        return_content: yes
      register: duckdns_update
      failed_when: "'OK' not in duckdns_update.content"
      tags: duckdns

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Reconnect to apply group changes
      meta: reset_connection

    - name: Start docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Wait for docker service
      pause:
        seconds: 10

    - name: Start Minikube
      command: minikube start
      become_user: ubuntu

    - name: Create all namespaces
      command: kubectl create namespace {{ item }}
      become_user: ubuntu
      loop:
        - argocd
        - jenkins
        - staging
        - production
      ignore_errors: yes

    - name: Clone K8s repository
      git:
        repo: "https://github.com/omerbenda98/puppy-adoption-k8s.git"
        dest: /home/ubuntu/puppy-adoptions-k8s
        version: main
      become_user: ubuntu

    - name: Install & Deploy ArgoCD
      command: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      become_user: ubuntu

    # - name: Wait for ArgoCD to be ready
    #   command: kubectl wait --for=condition=Ready pods -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s
    #   become_user: ubuntu

    - name: Enable Minikube addons
      command: minikube addons enable {{ item }}
      become_user: ubuntu
      loop:
        - ingress
        - metrics-server
        - default-storageclass

    - name: Apply custom ingress-nginx service configuration
      command: kubectl apply -f /home/ubuntu/puppy-adoptions-k8s/infrastructure/ingress-nginx/service.yaml -n ingress-nginx
      become_user: ubuntu

    - name: Create directory for Jenkins data
      file:
        path: /data/jenkins-volume
        state: directory
        mode: "0755"
      become: yes

    - name: Apply Jenkins configurations
      command: kubectl apply -f {{ item }}
      become_user: ubuntu
      loop:
        - /home/ubuntu/puppy-adoptions-k8s/platform/jenkins/serviceAccount.yaml
        - /home/ubuntu/puppy-adoptions-k8s/platform/jenkins/volume.yaml
        - /home/ubuntu/puppy-adoptions-k8s/platform/jenkins/deployment.yaml
        - /home/ubuntu/puppy-adoptions-k8s/platform/jenkins/service.yaml

    # - name: Wait for Jenkins pod to be ready
    #   command: kubectl wait --for=condition=Ready pods -l app=jenkins-server -n jenkins --timeout=300s
    #   become_user: ubuntu

    - name: Apply MongoDB Secret Production
      command: kubectl apply -f /home/ubuntu/puppy-adoptions-k8s/production/secrets/mongodb-secret.yaml -n production
      become_user: ubuntu

    - name: Apply MongoDB Secret Staging
      command: kubectl apply -f /home/ubuntu/puppy-adoptions-k8s/staging/secrets/mongodb-secret.yaml -n staging
      become_user: ubuntu

    - name: Apply Production ConfigMap and Ingress
      command: kubectl apply -f {{ item }} -n production
      become_user: ubuntu
      loop:
        - /home/ubuntu/puppy-adoptions-k8s/production/configmap.yaml
        - /home/ubuntu/puppy-adoptions-k8s/production/ingress.yaml

    - name: Apply Staging ConfigMap and Ingress
      command: kubectl apply -f {{ item }} -n staging
      become_user: ubuntu
      loop:
        - /home/ubuntu/puppy-adoptions-k8s/staging/configmap.yaml
        - /home/ubuntu/puppy-adoptions-k8s/staging/ingress.yaml

    - name: Create nginx proxy configuration for Minikube
      copy:
        src: /home/ubuntu/puppy-adoptions-k8s/infrastructure/ansible/templates/minikube-proxy.conf
        dest: /etc/nginx/sites-available/minikube-proxy.conf
        owner: root
        group: root
        mode: "0644"
        remote_src: yes
      tags: nginx

    - name: Enable nginx proxy configuration
      file:
        src: /etc/nginx/sites-available/minikube-proxy.conf
        dest: /etc/nginx/sites-enabled/minikube-proxy.conf
        state: link
      tags: nginx

    - name: Remove default nginx site configuration
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      tags: nginx

    - name: Restart nginx
      service:
        name: nginx
        state: restarted
      tags: nginx

    - name: Deploy Production Environment
      command: kubectl apply -f {{ item }}
      become_user: ubuntu
      loop:
        - /home/ubuntu/puppy-adoptions-k8s/production/backend/deployment.yaml
        - /home/ubuntu/puppy-adoptions-k8s/production/backend/service.yaml
        - /home/ubuntu/puppy-adoptions-k8s/production/frontend/deployment.yaml
        - /home/ubuntu/puppy-adoptions-k8s/production/frontend/service.yaml

    - name: Deploy Staging Environment
      command: kubectl apply -f {{ item }}
      become_user: ubuntu
      loop:
        - /home/ubuntu/puppy-adoptions-k8s/staging/backend/deployment.yaml
        - /home/ubuntu/puppy-adoptions-k8s/staging/backend/service.yaml
        - /home/ubuntu/puppy-adoptions-k8s/staging/frontend/deployment.yaml
        - /home/ubuntu/puppy-adoptions-k8s/staging/frontend/service.yaml

    - name: Wait for Production pods to be ready
      command: kubectl wait --for=condition=Ready pods -l app={{ item }} -n production --timeout=300s
      become_user: ubuntu
      loop:
        - backend
        - frontend

    - name: Wait for Staging pods to be ready
      command: kubectl wait --for=condition=Ready pods -l app={{ item }} -n staging --timeout=300s
      become_user: ubuntu
      loop:
        - backend
        - frontend
# need to deploy jenkins
# need to deploy pods into production and staging namespaces
